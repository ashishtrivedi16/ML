{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true
      },
      "cell_type": "code",
      "source": "import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom skimage import io, transform\n\nimport os, glob\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D, Dropout, Flatten\n\nfrom sklearn.model_selection import train_test_split\nprint(\"Loaded...\")",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Loaded...\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "08737d2858b2ea48d6e51151916caab107fbdf27"
      },
      "cell_type": "code",
      "source": "train_img_list = glob.glob(\"../input/fingers/fingers/train/*.png\")\ntest_img_list = glob.glob(\"../input/fingers/fingers/test/*.png\")\nprint(len(train_img_list),\n     len(test_img_list), sep = '\\n')",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": "9000\n1800\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": true
      },
      "cell_type": "code",
      "source": "def import_data():\n    train_img_data = []\n    test_img_data = []\n    train_label_data = []\n    test_label_data = []\n    \n    for img in train_img_list:\n        img_read = io.imread(img, channels = 1)\n        img_read = transform.resize(img_read, (128,128), mode = 'constant')\n        train_img_data.append(img_read)\n        train_label_data.append(img[-5])\n    \n    for img in test_img_list:\n        img_read = io.imread(img, channels = 1)\n        img_read = transform.resize(img_read, (128,128), mode = 'constant')\n        test_img_data.append(img_read)\n        test_label_data.append(img[-5])\n        \n    return np.array(train_img_data), np.array(test_img_data), np.array(train_label_data), np.array(test_label_data)\n    ",
      "execution_count": 12,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8f86489096fec397e38164dadc51279094fe886c"
      },
      "cell_type": "code",
      "source": "xtrain, xtest, ytrain, ytest = import_data()",
      "execution_count": 13,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "42a5769704a74eed1f1fed7465ee84f7649b8266"
      },
      "cell_type": "code",
      "source": "xtrain = xtrain.reshape(xtrain.shape[0], 128, 128, 1)\nxtest = xtest.reshape(xtest.shape[0], 128, 128, 1)\n\nytrain = tf.keras.utils.to_categorical(ytrain, num_classes = 6)\nytest = tf.keras.utils.to_categorical(ytest, num_classes = 6)\nprint(xtrain.shape, xtest.shape, ytrain.shape, ytest.shape)",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": "(9000, 128, 128, 1) (1800, 128, 128, 1) (9000, 6) (1800, 6)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "740b20fad619488d8f45f2260e149085be905310"
      },
      "cell_type": "code",
      "source": "x_train, x_test, y_train, y_test = train_test_split(xtrain, ytrain, test_size = 0.20, random_state = 7, shuffle = True)\nx_train_val, x_test_val, y_train_val, y_test_val = train_test_split(x_train, y_train, test_size = 0.20, random_state = 7, shuffle = True)",
      "execution_count": 15,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b52db890a962892c5dad3f87690cab01f69101f6"
      },
      "cell_type": "code",
      "source": "model = Sequential()\nmodel.add(Conv2D(32, (3,3), input_shape = (128, 128, 1), activation = 'relu'))\nmodel.add(Conv2D(32, (3,3), activation = 'relu'))\n\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\nmodel.add(Conv2D(64, (3,3), activation = 'relu'))\n\nmodel.add(MaxPool2D((2,2)))\n\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\n\nmodel.add(Flatten())\n\nmodel.add(Dropout(0.40))\nmodel.add(Dense(256, activation = 'relu'))\nmodel.add(Dropout(0.40))\nmodel.add(Dense(6, activation = 'softmax'))\n\nmodel.summary()",
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_7 (Conv2D)            (None, 126, 126, 32)      320       \n_________________________________________________________________\nconv2d_8 (Conv2D)            (None, 124, 124, 32)      9248      \n_________________________________________________________________\nconv2d_9 (Conv2D)            (None, 122, 122, 64)      18496     \n_________________________________________________________________\nconv2d_10 (Conv2D)           (None, 120, 120, 64)      36928     \n_________________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 60, 60, 64)        0         \n_________________________________________________________________\nconv2d_11 (Conv2D)           (None, 58, 58, 128)       73856     \n_________________________________________________________________\nconv2d_12 (Conv2D)           (None, 56, 56, 128)       147584    \n_________________________________________________________________\nflatten_2 (Flatten)          (None, 401408)            0         \n_________________________________________________________________\ndropout_3 (Dropout)          (None, 401408)            0         \n_________________________________________________________________\ndense_3 (Dense)              (None, 256)               102760704 \n_________________________________________________________________\ndropout_4 (Dropout)          (None, 256)               0         \n_________________________________________________________________\ndense_4 (Dense)              (None, 6)                 1542      \n=================================================================\nTotal params: 103,048,678\nTrainable params: 103,048,678\nNon-trainable params: 0\n_________________________________________________________________\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "bdc175ecde337195ecb3997c8e8d7bf3935755af"
      },
      "cell_type": "code",
      "source": "model.compile('SGD', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(x = x_train, y = y_train, batch_size = 128, epochs = 10, validation_data = (x_test, y_test))",
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Train on 7200 samples, validate on 1800 samples\nEpoch 1/10\n7200/7200 [==============================] - 56s 8ms/step - loss: 1.3586 - acc: 0.5510 - val_loss: 0.7074 - val_acc: 0.7394\nEpoch 2/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.1401 - acc: 0.9571 - val_loss: 0.0711 - val_acc: 0.9711\nEpoch 3/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.1312 - acc: 0.9678 - val_loss: 0.2022 - val_acc: 0.9222\nEpoch 4/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0423 - acc: 0.9868 - val_loss: 0.0098 - val_acc: 0.9967\nEpoch 5/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0211 - acc: 0.9936 - val_loss: 0.0053 - val_acc: 0.9983\nEpoch 6/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0119 - acc: 0.9969 - val_loss: 0.0025 - val_acc: 0.9994\nEpoch 7/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0103 - acc: 0.9967 - val_loss: 0.0029 - val_acc: 0.9994\nEpoch 8/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0053 - acc: 0.9989 - val_loss: 0.0013 - val_acc: 1.0000\nEpoch 9/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0031 - acc: 0.9996 - val_loss: 5.8483e-04 - val_acc: 1.0000\nEpoch 10/10\n7200/7200 [==============================] - 52s 7ms/step - loss: 0.0029 - acc: 0.9994 - val_loss: 2.8309e-04 - val_acc: 1.0000\n",
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "<keras.callbacks.History at 0x7f732af85080>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9f662f5799bf5a425e1e742208b72b4670377404"
      },
      "cell_type": "code",
      "source": "pred = model.evaluate(xtest,\n                      ytest,\n                    batch_size = 128)\n\nprint(\"Accuracy of model on test data is: \",pred[1]*100)",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": "\r 128/1800 [=>............................] - ETA: 3s",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "040a5473bfaf65367df4b981274be916bbc2d32a"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}